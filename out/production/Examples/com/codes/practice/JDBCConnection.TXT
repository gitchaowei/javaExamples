JDBC Connection
Simple 4 steps:
•	Import JDBC Packages − Add import statements to your Java program to import required classes in your Java code.
•	Register JDBC Driver − This step causes the JVM to load the desired driver implementation into memory so it can fulfill your JDBC requests.
•	Database URL Formulation − This is to create a properly formatted address that points to the database to which you wish to connect.
•	Create Connection Object − Finally, code a call to the DriverManager object's getConnection( ) method to establish actual database connection.

Step 1: Import JDBC Packages
import java.sql.* ;  // for standard JDBC programs
import java.math.* ; // for BigDecimal and BigInteger support

Step 2: Register JDBC Driver
To connect with a database using JDBC you need to select get the driver for the respective database and register the driver. You can register a database driver in two ways

1)	Approach I - Class.forName()
Use Class.forName() method, to dynamically load the driver's class file into memory, which automatically registers it
        try {
            Class.forName("com.mysql.jdbc.Driver ");
        }
        catch(ClassNotFoundException ex) {
            System.out.println("Error: unable to load driver class!");
            System.exit(1);
        }
        String mysqlUrl = "jdbc:mysql://localhost/mydatabase";
         Connection con = DriverManager.getConnection(mysqlUrl, "root", "password");
        System.out.println("Connection established: "+con);

A list of popular JDBC driver names and database URL.
RDBMS	JDBC driver name	            URL format
MySQL	com.mysql.jdbc.Driver	        jdbc:mysql://hostname/ databaseName
ORACLE	oracle.jdbc.driver.OracleDriver	jdbc:oracle:thin:@hostname:port number:databaseName
DB2	    COM.ibm.db2.jdbc.net.DB2Driver	jdbc:db2:hostname:port number/databaseName
Sybase	com.sybase.jdbc.SybDriver	    jdbc:sybase:Tds:hostname: port number/databaseName

Use getInstance() method to work around noncompliant JVMs, but then you'll have to code for two extra Exceptions as follows −
        try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
        }
        catch(ClassNotFoundException ex) {
           System.out.println("Error: unable to load driver class!");
           System.exit(1);
        catch(IllegalAccessException ex) {
           System.out.println("Error: access problem while loading!");
           System.exit(2);
        catch(InstantiationException ex) {
           System.out.println("Error: unable to instantiate driver!");
           System.exit(3);
        }

2)	Approach II - DriverManager.registerDriver()
Use the registerDriver() method if you are using a non-JDK compliant JVM, such as the one provided by Microsoft.
        try {
            Driver myDriver = new com.mysql.jdbc.Driver();
            DriverManager.registerDriver(myDriver);
        } catch(ClassNotFoundException ex) {
           System.out.println("Error: unable to load driver class!");
           System.exit(1);
        }
        String mysqlUrl = "jdbc:mysql://localhost/mydatabase";
        Connection con = DriverManager.getConnection(mysqlUrl, "root", "password");
        System.out.println("Connection established: "+con);

Step 3: Database URL Formulation
Establish a connection using the DriverManager.getConnection() method. For easy reference, let me list the three overloaded DriverManager.getConnection() methods −
•	getConnection(String url)
•	getConnection(String url, Properties prop)
•	getConnection(String url, String user, String password)
Step 4: Create Connection Object
Use three forms of DriverManager.getConnection() methods to create a connection object.
        String URL = "jdbc:oracle:thin:@amrood:1521:EMP";
        String USER = "username";
        String PASS = "password"
        Connection conn = DriverManager.getConnection(URL, USER, PASS);

        Or
        String URL = "jdbc:oracle:thin:username/password@amrood:1521:EMP";
        Connection conn = DriverManager.getConnection(URL);

        Or
        String URL = "jdbc:oracle:thin:@amrood:1521:EMP";
        Properties info = new Properties( );
        info.put( "user", "username" );
        info.put( "password", "password" );

        Connection conn = DriverManager.getConnection(URL, info);




