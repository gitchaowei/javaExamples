A design pattern provides a general reusable solution for the common problems that occur
in software design. The pattern typically shows relationships and interactions between
classes or objects.
The idea is to speed up the development process by providing well-tested,
proven development/design paradigms.

1) Creational
   These design patterns are all about class instantiation or object creation.
   These patterns can be further categorized into Class-creational patterns and
   object-creational patterns. While class-creation patterns use inheritance effectively
   in the instantiation process, object-creation patterns use delegation effectively to get the job done.

   Creational design patterns are
        Factory Method (i.e., using multiple database servers like SQL Server, Oracle)
        Singleton (i.e., to create DBConnection and access the DB at multiple locations from code)
        Prototype.
        Abstract Factory,
        Builder,
        Object Pool, and

2) Structural
   These design patterns are about organizing different classes and objects to form larger structures and
   provide new functionality.
   Structural design patterns are
        Adapter,
        Bridge,
        Composite,
        Proxy.
        Decorator,
        Facade,
        Flyweight,
        Private Class Data, and

   Use Case Of Structural Design Pattern-

   When 2 interfaces are not compatible with each other and want to establish a relationship between them
   through an adapter it’s called an adapter design pattern. The adapter pattern converts the interface
   of a class into another interface or class that the client expects,
   i.e adapter lets classes work together that could not otherwise because of incompatibility.
   so in these types of incompatible scenarios, we can go for the adapter pattern.

3) Behavioral
   Behavioral patterns are about identifying common communication patterns between objects and realizing these patterns.
   Behavioral patterns are
        Template method,
        Chain of responsibility,
        Strategy,
        Observer,
        Command,
        Interpreter,
        Iterator,
        Mediator,
        Memento,
        Null Object,
        State,
        Visitor

   Use Case of Behavioral Design Pattern-

   The template pattern defines the skeleton of an algorithm in an operation deferring some steps to sub-classes.
   The template method lets subclasses redefine certain steps of an algorithm without changing the algorithm structure.

   For example, in your project, you want the behavior of the module to be able to extend, such that we can make
   the module behave in new and different ways as the requirements of the application change, or to meet the needs
   of new applications. However, no one is allowed to make source code changes to it, i.e you can add but can’t modify
   the structure in those scenarios a developer can approach template design pattern.