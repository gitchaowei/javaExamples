Runnable Interface:
    . java.lang.Runnable is an interface and defines only one method called run().
    . It represents a task in Java that is executed by Thread.
    . There are two ways to start a new thread using Runnable,
       one is by implementing the Runnable interface and another one is by subclassing the Thread class.
           •	Provide a Runnable object: (new Thread (new RunnerableClass())).start();
           •	Subclass Thread implemting run() interface:(new threadsub()).start();

    . Runnable cannot return the result of computation which is essential
                                      if you are performing some computing task in another thread, and
      Runnable cannot throw checked exceptions.

Callable Interface:

    . It is declared in the ‘java.util.concurrent‘ package.
    . This interface also contains a single, no-argument method, called call() method
    . We can’t create a thread by passing callable as a parameter.
    . Callable can return results. Callable’s call() method contains the “throws Exception” clause, so
      we can easily propagate checked exceptions further.


Runnable :

If you have a fire and forget task then use Runnable. Put your code inside a Runnable and when the run() method is called,
you can perform your task. The calling thread really does not care when you perform your task.

Callable :

If you are trying to retrieve a value from a task, then use Callable. Now callable on its own will not do the job.
You will need a Future that you wrap around your Callable and get your values on future.get().
Here the calling thread will be blocked till the Future comes back with results which in turn is waiting for Callable's call() method to execute.

So think about an interface to a target class where you have both Runnable and Callable wrapped methods defined.
The calling class will randomly call your interface methods not knowing which is Runnable and which is Callable.
The Runnable methods will execute asynchronously, till a Callable method is called.
Here the calling class's thread will block since you are retrieving values from your target class.

NOTE : Inside your target class you can make the calls to Callable and Runnable on a single thread executor,
making this mechanism similar to a serial dispatch queue. So as long as the caller calls your Runnable wrapped methods
the calling thread will execute really fast without blocking. As soon as it calls a Callable wrapped in Future method
it will have to block till all the other queued items are executed. Only then the method will return with values.
This is a synchronization mechanism.

Thread.sleep(): sleep current thread
Thread.interrupted():stop what it is doing and do something else
t.join(): causes the current thread to pause execution until t's thread terminates

Mutual Exclusive helps keep threads from interfering with one another while sharing data. It can be achieved by using the following three ways:
    •	By Using Synchronized Method
    •	By Using Synchronized Block
    •	By Using Static Synchronization (synchronized keyword on the static method to perform static synchronization)
Inter-thread communication is all about allowing synchronized threads to communicate with each other by:
    •	wait(), notified by notify() or notifyAll().
    •	notify()
    •	notifyAll()
Concurrent APIs:
    •	ConcurrentHashMap
    •	ConcurrentSkipListMap
    •	ConcurrentSkipListSet
    •	ArrayBlockingQueue
    •	PriorityBlockingQueue
    •	LinkedBlockingQueue
    •	DelayQueue
    •	PriorityBlockingDeque
    •	CopyOnWriteArrayList
    •	CopyOnWriteArraySet
Synchronized collection APIs:
    •	Collections.synchronizedCollection(Collection <T> c)
    •	Collections.synchronizedList(new ArrayList<String>())
    •	Collections.synchronizedSet(new HashSet<String>())
    •	Collections.synchronizedSortedSet(SortedSet<T> s)
    •	Collections.synchronizedMap(new HashMap<Integer, String>())
    •	Collections.synchronizedSortedMap(SortedMap<K,V> m)
    •	Thread safe collections: Vector, HashTable, Stack
Concurrent Atomic package (java.util.concurrent.atomic) on single variables. .get() value is similar to volatile
    •	AtomicInteger
    •	AtomicBoolean
    •	AtomicLong
    •	AtomicReference

